//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace dataConversionApp.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EmployeeDBEntities : DbContext
    {
        public EmployeeDBEntities()
            : base("name=EmployeeDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<DeletedEmployeeID> DeletedEmployeeIDs { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual ObjectResult<getAllEmps_Result> getAllEmps()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllEmps_Result>("getAllEmps");
        }
    
        public virtual int ProcessNextEmployeeID(ObjectParameter newEmpId)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessNextEmployeeID", newEmpId);
        }
    
        public virtual ObjectResult<sp_GetAllEmps_Result> sp_GetAllEmps()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllEmps_Result>("sp_GetAllEmps");
        }
    
        public virtual int stprc_User_InsertIntoTable(string name, Nullable<int> salary, string city)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("salary", salary) :
                new ObjectParameter("salary", typeof(int));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stprc_User_InsertIntoTable", nameParameter, salaryParameter, cityParameter);
        }
    
        public virtual int stprc_Users_DeleteFromUsers(Nullable<int> empId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("empId", empId) :
                new ObjectParameter("empId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stprc_Users_DeleteFromUsers", empIdParameter);
        }
    
        public virtual int stprc_Users_DeleteMultipleUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stprc_Users_DeleteMultipleUsers");
        }
    
        public virtual ObjectResult<stprc_Users_GetAllUsers_SearchByName_Result> stprc_Users_GetAllUsers_SearchByName(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stprc_Users_GetAllUsers_SearchByName_Result>("stprc_Users_GetAllUsers_SearchByName", searchParameter);
        }
    
        public virtual int stprc_Users_UpdateUser(Nullable<int> empId, string name, Nullable<int> salary, string city)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("empId", empId) :
                new ObjectParameter("empId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("salary", salary) :
                new ObjectParameter("salary", typeof(int));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stprc_Users_UpdateUser", empIdParameter, nameParameter, salaryParameter, cityParameter);
        }
    }
}
